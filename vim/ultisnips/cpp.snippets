#######################
# テンプレート
#######################
snippet comp "compro g++ base"
#include <bits/stdc++.h>
using namespace std;

#define ALL(v) v.begin(), v.end()
#define V vector
#define P pair
using ll = long long;


int main() { ${1:implement} return 0; }
endsnippet

snippet temp "compro clang base"
// include headers {{{
#define _USE_MATH_DEFINES
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <fstream>
#include <functional>
#include <initializer_list>
#include <iomanip>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

#define ALL(v) v.begin(), v.end()
#define V vector
#define P pair
using ll = long long;
// }}}


int main() {
  ${1:Implement}

  return 0;
}
endsnippet



#######################
# 入出力
#######################
snippet in "cin"
cin >> ${1:Variant};
endsnippet

snippet op "cout"
cout << ${1:Out} << endl;
endsnippet

snippet opf "printf"
printf("%.10f\n", ${1:Out});
endsnippet

snippet rep "for loop"
for (int ${1:Counter} = 0; $1 < ${2:Max}; $1++) {
  ${3:Implement}
}
endsnippet



#######################
# 典型
#######################
# gcd/lcm
snippet gcd "great common devisor, least common multiple"
template<typename T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }
template<typename T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
endsnippet

# chmax/chmin
snippet chmax "change min max"
template<class T> void chmax(T& a, T b) { if(a < b) a = b; }
template<class T> void chmin(T& a, T b) { if(a > b) a = b; }
endsnippet

# 順列全探索
snippet nextp "next_permitation snippet"
  vector<int> nums(n);
  iota(nums.begin(), nums.end(), 1);
  do {
    printVec(nums);
  } while(next_permutation(nums.begin(), nums.end()));
endsnippet

# 素因数分解
snippet prime_factorize "prime factrize"
// const auto &pf = prime_factorize(N);
vector<pair<ll, ll> > prime_factorize(ll n){
  vector<pair<ll, ll> > res;
  for(ll i = 2; i * i <= n; i++){
    if(n % i != 0) continue;
    ll ex = 0;
    while(n % i == 0){
      ex++;
      n /= i;
    }
    res.push_back({i, ex});
  }
  if(n != 1) res.push_back({n, 1});
  return res;
}
endsnippet

# 階乗
snippet factorial "prime factrize"
ll factorial(ll n) {
  ll ans = 1;
  for(ll i = 1; i <= n; i++){
    ans *= i;
  }
  return ans;
}
endsnippet

# 深優先探索
snippet dfs "dfs snippet"
using Graph = vector<vector<int>>;
vector<bool> seen;
void dfs(const Graph &g, int v){
  seen[v] = true;
  for(auto next_v : g[v]){
    if(seen[next_v]) continue;
    dfs(g, next_v);
  }
}
endsnippet

snippet dfs2 "dfs2 snippet"
void dfs(vector<int> &A){
  if(A.size() == ${1:Variant}){
    return;
  }

  for(int i = 0; i < ${2:Variant}; i++){
    A.push_back(i);
    dfs(A);
    A.pop_back();
  }
}
endsnippet
