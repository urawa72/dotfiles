#######################
# テンプレート
#######################
snippet comp "compro template"
import sys
sys.setrecursionlimit(10**7)
input = sys.stdin.readline

${1:start}
endsnippet

snippet main "main func"
def main():
    ${1:start}


if __name__ == '__main__':
    main()
endsnippet

snippet libs "import libs"
from collections import Counter, deque
from collections import defaultdict
from itertools import combinations, permutations, accumulate, groupby, product
from bisect import bisect_left,bisect_right
from heapq import heapify, heappop, heappush
from math import floor, ceil,pi,factorial
from operator import itemgetter
endsnippet


#######################
# 入出力
#######################
snippet in "input integer"
int(input())
endsnippet

snippet mapin "map input integer"
map(int, input().split())
endsnippet

snippet listin "list input integer"
list(map(int, input().split()))
endsnippet

snippet tuplein "tuple input integer"
tuple(map(int,input().split()))
endsnippet

snippet op "simple print"
print(${1:output})
endsnippet


#######################
# 典型
#######################
# 素数判定
snippet is_prime "is_prime"
def is_prime(n):
    for i in range(2, n + 1):
        if i * i > n: break
        if n % i == 0: return False
    return n != 1
endsnippet

# DFS
snippet dfs "dfs with dqeue"
n, q = map(int, input().split())
g = [[] for _ in range(n)]

for _ in range(n - 1):
    a, b = map(int, input().split())
    a -= 1
    b -= 1
    g[a].append(b)
    g[b].append(a)

seen = [False] * n
d = deque()
d.append(0)
while deq:
    v = d.pop()
    seen[v] = True
    for nv in g[v]:
        if seen[nv]: continue
        d.append(nv)
endsnippet

# グリッドBFS
snippet grid_bfs "bfs with deque"
dy_dx = [[1,0],[0,1],[-1,0],[0,-1]]

h, w = map(int, input().split())
s = [list(input()) for i in range(h)]

dis = [[-1 for k in range(w)] for k in range(h)]
dis[0][0] = 0
d = deque()
d.append([0, 0])
while len(d):
    now = d.popleft()
    y = now[0]
    x = now[1]
    for k in range(4):
        ny = y + dy_dx[k][0]
        nx = x + dy_dx[k][1]
        if 0 <= ny < h and 0 <= nx < w:
            if s[ny][nx] != '#' and dis[ny][nx] == -1:
                dis[ny][nx] = dis[y][x] + 1
                d.append([ny, nx])
endsnippet
